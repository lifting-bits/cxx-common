name: Linux Continuous Integration

env:
  # "Source" is set in the vcpkg install step
  VCPKG_BINARY_SOURCES: 'clear;nuget,Source,readwrite;nugettimeout,3601'
  # Self-hosted runners can hopefully reuse already downloaded packages
  VCPKG_USE_NUGET_CACHE: 1

on:
  release:
    types:
      - published
  pull_request:
    paths-ignore:
      - 'docker/**'
      - '.github/**'
      - '**.md'
      - 'old/**'
      - '!.github/workflows/vcpkg_ci_linux.yml'
  push:
    paths-ignore:
      - 'docker/**'
      - '.github/**'
      - '**.md'
      - 'old/**'
      - '!.github/workflows/vcpkg_ci_linux.yml'
    tags-ignore:
      - 'v*'
    branches:
      - 'master'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        host:
          - { name: 'ubuntu-20.04', arch: 'amd64', triplet: 'x64-linux-rel', arch_docker: '' }
        image:
          - { name: 'ubuntu', tag: '18.04' }
          - { name: 'ubuntu', tag: '20.04' }
        llvm: [
          'llvm-12',
          'llvm-13'
          ]
        # Only some LLVM versions for ARM CI
        include:
          - host: { name: ['self-hosted', 'Linux', 'ARM64'], arch: 'arm64', triplet: 'arm64-linux-rel', arch_docker: '_arm64' }
            llvm: 'llvm-12'
            image: { name: 'ubuntu', tag: '20.04' }

    runs-on: ${{ matrix.host.name }}
    container:
      image: docker.pkg.github.com/lifting-bits/cxx-common/vcpkg-builder-${{ matrix.image.name }}:${{ matrix.image.tag }}${{ matrix.host.arch_docker }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    env:
      ARTIFACT_NAME: vcpkg_${{ matrix.image.name }}-${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ matrix.host.arch }}.tar.xz
      VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.host.triplet }}

    steps:
      # Used to get commit message since PRs are on a merge commit
      - uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.after }}
          submodules: false
      - name: Get commit message
        run: |
          echo 'COMMIT_MESSAGE<<EOF' >> "$GITHUB_ENV"
          echo "$(git log --format=%B -n 1 ${{ github.event.after }})" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      - uses: actions/checkout@v2.4.0
        with:
          submodules: recursive

      - name: Read vcpkg Info
        id: vcpkg_info
        shell: bash
        run: |
          { read -r vcpkg_repo_url && read -r vcpkg_commit; } <./vcpkg_info.txt || exit 1
          echo ::set-output name=repo_url::${vcpkg_repo_url}
          echo ::set-output name=commit::${vcpkg_commit}

      - name: Clear prior vcpkg directory
        run: |
          rm -rf "${{ github.workspace }}/vcpkg"

      # Needed for caching the actual vcpkg executable
      - name: 'Restore from cache and install vcpkg'
        uses: lukka/run-vcpkg@v10.0
        with:
          vcpkgGitURL: ${{ steps.vcpkg_info.outputs.repo_url }}
          vcpkgGitCommitId: ${{ steps.vcpkg_info.outputs.commit }}
          appendedCacheKey: '${{ matrix.host.arch }}-${{ matrix.image.name }}-${{ matrix.image.tag }}-${{ matrix.host.arch }}-${{ matrix.llvm }}-clear'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          setupOnly: true

        # Omit this step if using manifests
      - name: 'vcpkg install dependencies'
        shell: 'bash'
        run: |
          export VCPKG_DISABLE_METRICS=1
          if [ ${{ matrix.host.arch }} == "arm64" ] ; then
            export VCPKG_FORCE_SYSTEM_BINARIES=1
          fi

          # Setup NuGet authentication
          mono "$(${VCPKG_ROOT}/vcpkg fetch nuget | tail -n 1)" sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "Source" \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}" || true

          mono "$(${VCPKG_ROOT}/vcpkg fetch nuget | tail -n 1)" sources update \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "Source" \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"

          mono "$(${VCPKG_ROOT}/vcpkg fetch nuget | tail -n 1)" setapikey \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            "${{ secrets.GITHUB_TOKEN }}"

          ${VCPKG_ROOT}/vcpkg install \
            --triplet "${{ matrix.host.triplet }}" \
            --clean-after-build \
            --debug \
            ${{ matrix.llvm }} \
            @overlays.txt \
            @dependencies.txt

      - name: 'Export Packages'
        if: contains(env.COMMIT_MESSAGE, 'debug artifacts') || github.event.release
        shell: 'bash'
        run: |
          apt-get update
          apt-get install -y pixz
          if [ ${{ matrix.host.arch }} == "arm64" ] ; then
            export VCPKG_FORCE_SYSTEM_BINARIES=1
          fi
          ./emit_artifacts.sh ${{ env.ARTIFACT_NAME }}

      - uses: actions/upload-artifact@v2.3.1
        if: contains(env.COMMIT_MESSAGE, 'debug artifacts') || github.event.release
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}

      - name: Prepare ccache
        id: ccache_prep
        shell: bash
        run: |
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPILERCHECK=content" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CMAKE_C_COMPILER_LAUNCHER=$(which ccache)" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=$(which ccache)" >> $GITHUB_ENV
          echo ::set-output name=timestamp::$(date +"%Y-%m-%d-%H:%M:%S" --utc)

      - name: ccache cache files
        uses: actions/cache@v2.1.7
        with:
          path: ${{  github.workspace }}/.ccache
          key: ccache-${{ matrix.image.name }}-${{ matrix.image.tag }}-${{ matrix.host.arch }}-${{ matrix.llvm }}-${{ steps.ccache_prep.outputs.timestamp }}
          restore-keys: |
            ccache-${{ matrix.image.name }}-${{ matrix.image.tag }}-${{ matrix.host.arch }}-${{ matrix.llvm }}-

      - name: ccache Initial stats
        shell: bash
        run: |
          ccache --show-stats

      - name: 'Rellic build'
        shell: 'bash'
        if: ${{ matrix.llvm == 'llvm-12' }}
        run: |
          cd rellic
          rm -rf build
          mkdir -p build && cd build
          cmake -G Ninja \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DVCPKG_ROOT="${VCPKG_ROOT}" \
            -DCMAKE_INSTALL_PREFIX="$(pwd)/install" \
            ..
          cmake --build .
          cmake --build . --target install
          ../scripts/roundtrip.py ./tools/rellic-decomp-* ../tests/tools/decomp "${VCPKG_ROOT}/installed/${{ matrix.host.triplet }}/tools/llvm/clang"

      - name: 'Remill build'
        shell: 'bash'
        if: ${{ matrix.llvm == 'llvm-12' }}
        run: |
          cd remill
          rm -rf build
          mkdir -p build && cd build
          cmake -G Ninja \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DVCPKG_ROOT="${VCPKG_ROOT}" \
            -DCMAKE_INSTALL_PREFIX="$(pwd)/install" \
            ..
          cmake --build .
          cmake --build . --target install
          cmake --build . --target test_dependencies
          # See issue https://github.com/lifting-bits/remill/issues/518 for
          # failing aarch64 tests
          if [ ${{ matrix.host.arch }} == "arm64" ] ; then
            env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target test || true
          else
            env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target test
          fi

      - name: 'Anvill build'
        shell: 'bash'
        if: ${{ matrix.llvm == 'llvm-12' }}
        run: |
          cd anvill
          rm -rf build
          mkdir -p build && cd build
          cmake -G Ninja \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_INSTALL_PREFIX="$(pwd)/install" \
            -DVCPKG_ROOT="${VCPKG_ROOT}" \
            -DANVILL_ENABLE_INSTALL_TARGET=ON \
            -DANVILL_ENABLE_PYTHON3_LIBS=OFF \
            -Dremill_DIR="$(pwd)/../../remill/build/install/lib/cmake/remill" \
            ..
          cmake --build .
          cmake --build . --target install
          ./install/bin/anvill-decompile-json-* -spec ../tools/decompile-json/tests/specs/ret0.json -bc_out ./ret0.bc -ir_out ret0.ir

      - name: Publish Release Assets
        if: |
          github.event.release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ARTIFACT_NAME }}
          prerelease: ${{ contains(github.ref, 'pre') || contains(github.ref, 'rc') }}
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Cache cleanup and reporting
        shell: 'bash'
        run: |
          rm -rf ${VCPKG_ROOT}/{buildtrees,installed,packages}
          ccache --show-stats
